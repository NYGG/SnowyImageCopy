<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="clr-namespace:SnowyImageCopy.Views.Controls">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="CustomTheme.xaml"/>
	</ResourceDictionary.MergedDictionaries>

<!--=============================
	 Custom styles, Templates 
==============================-->

	<!-- Focus Visual for Button -->
	<Style x:Key="ButtonFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle
							Margin="2"
							StrokeThickness="1"
							Stroke="#60000000"
							StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Skeleton Template for Button -->
	<ControlTemplate x:Key="ButtonTemplate">
		<Border BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				Background="{TemplateBinding Background}"
				TextBlock.Foreground="{TemplateBinding Foreground}">
			<ContentPresenter
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
				Margin="{TemplateBinding Padding}"
				Content="{TemplateBinding ContentPresenter.Content}"/>
		</Border>
	</ControlTemplate>

	<!-- Button base colors -->
	<SolidColorBrush x:Key="Button.Normal.Border" Color="#FFACACAC"/>
	<LinearGradientBrush x:Key="Button.Normal.Background" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="#FFF0F0F0" Offset="0.0"/>
		<GradientStop Color="#FFE5E5E5" Offset="1.0"/>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF7EB4EA"/>
	<LinearGradientBrush x:Key="Button.MouseOver.Background" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="#FFECF4FC" Offset="0.0"/>
		<GradientStop Color="#FFDCECFC" Offset="1.0"/>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF569DE5"/>
	<LinearGradientBrush x:Key="Button.Pressed.Background" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="#FFDAECFC" Offset="0.0"/>
		<GradientStop Color="#FFC4E0FC" Offset="1.0"/>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFD9D9D9"/>
	<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF0F0F0"/>
	<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

	<!-- Button base for Button, RepeatButton -->
	<Style x:Key="ButtonBaseStyle" TargetType="{x:Type ButtonBase}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Normal.Border}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Background" Value="{StaticResource Button.Normal.Background}"/>
		<Setter Property="Template" Value="{StaticResource ButtonTemplate}"/>

		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}"/>
				<Setter Property="Background" Value="{StaticResource Button.MouseOver.Background}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}"/>
				<Setter Property="Background" Value="{StaticResource Button.Pressed.Background}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}"/>
				<Setter Property="Background" Value="{StaticResource Button.Disabled.Background}"/>
				<Setter Property="Foreground" Value="{StaticResource Button.Disabled.Foreground}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- ToggleButton -->
	<Style x:Key="SwitchButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="BorderBrush" Value="{StaticResource SnowBlue.Normal.Border}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Background" Value="{StaticResource SnowBlue.Normal.Background}"/>
		<Setter Property="Foreground" Value="{StaticResource SnowBlue.Normal.Foreground}"/>
		<Setter Property="Template" Value="{StaticResource ButtonTemplate}"/>

		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource SnowBlue.MouseOver.Border}"/>
				<Setter Property="Background" Value="{StaticResource SnowBlue.MouseOver.Background}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource SnowBlue.MouseOver.Border}"/>
				<Setter Property="Background" Value="{StaticResource SnowBlue.MouseOver.Background}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="BorderBrush" Value="{StaticResource SnowBlue.Disabled.Border}"/>
				<Setter Property="Background" Value="{StaticResource SnowBlue.Disabled.Background}"/>
				<Setter Property="Foreground" Value="{StaticResource SnowBlue.Disabled.Foreground}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- NumericUpDown -->
	<Style TargetType="{x:Type controls:NumericUpDown}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid Width="90">
						<TextBox HorizontalAlignment="Stretch"
								 HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
								 IsReadOnly="True" IsUndoEnabled="False"
								 Text="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:NumericUpDown}}, Mode=OneWay}"/>
						<RepeatButton x:Name="PART_DownButton"
									  Width="30" HorizontalAlignment="Left"
									  Style="{StaticResource ButtonBaseStyle}">
							<Path Margin="4.5" Stretch="Uniform"
								  Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RepeatButton}}, Mode=OneWay}">
								<Path.Data>
									<GeometryGroup FillRule="Nonzero">
										<RectangleGeometry Rect="0,14 30,2"/>
										<RectangleGeometry Rect="14,0 0,30" />
									</GeometryGroup>
								</Path.Data>
							</Path>
						</RepeatButton>
						<RepeatButton x:Name="PART_UpButton"
									  Width="30" HorizontalAlignment="Right"
									  Style="{StaticResource ButtonBaseStyle}">
							<Path Margin="4.5" Stretch="Uniform"
								  Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RepeatButton}}, Mode=OneWay}">
								<Path.Data>
									<GeometryGroup FillRule="Nonzero">
										<RectangleGeometry Rect="0,14 30,2"/>
										<RectangleGeometry Rect="14,0 2,30"/>
									</GeometryGroup>
								</Path.Data>
							</Path>
						</RepeatButton>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- SlidingToggleButton -->
	<Style TargetType="{x:Type controls:SlidingToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid Cursor="Arrow" ForceCursor="True">
						<!-- Background -->
						<TextBox x:Name="PART_BackgroundTextBox"
								 IsReadOnly="True" IsUndoEnabled="False"/>

						<!-- Foreground -->
						<StackPanel Orientation="Horizontal">
							<Button x:Name="PART_ForegroundButtonLeft"
									Width="18"
									Style="{StaticResource ButtonBaseStyle}"/>
							<Grid Width="42">
								<TextBlock x:Name="PART_ForegroundTextBlock"
										   HorizontalAlignment="Center" VerticalAlignment="Center"/>
							</Grid>
							<Button x:Name="PART_ForegroundButtonRight"
									Width="18"
									Style="{StaticResource ButtonBaseStyle}"/>
						</StackPanel>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- BusyButton -->
	<Style TargetType="{x:Type controls:BusyButton}">
		<Style.Resources>
			<PathGeometry x:Key="WaveForm"
						  Figures="M0,100 C30,100 30,0 60,0 90,0 90,100 120,100"/>
		</Style.Resources>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="ButtonBorder"
								BorderBrush="{StaticResource SnowBlue.Normal.Border}"
								BorderThickness="0"
								Background="{StaticResource SnowBlue.Normal.Background}"
								TextBlock.Foreground="{StaticResource SnowBlue.Normal.Foreground}">
							<Grid>
								<Grid x:Name="WaveBox"
									  Height="30"
									  Opacity="0">
									<Grid.Background>
										<DrawingBrush x:Name="WaveBrush"
													  Viewport="0,0,25,30"
													  ViewportUnits="Absolute"
													  TileMode="Tile">
											<DrawingBrush.Drawing>
												<GeometryDrawing Geometry="{StaticResource WaveForm}">
													<GeometryDrawing.Pen>
														<Pen Brush="White"
															 Thickness="5"/>
													</GeometryDrawing.Pen>
												</GeometryDrawing>
											</DrawingBrush.Drawing>
										</DrawingBrush>
									</Grid.Background>
								</Grid>

								<TextBlock x:Name="PresenterBackground"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										   Margin="{TemplateBinding Padding}"
										   Foreground="{StaticResource SnowBlue.Normal.Blur}"
										   Opacity="0.8"
										   Text="{TemplateBinding ContentPresenter.Content}">
									<TextBlock.Effect>
										<BlurEffect Radius="2"
													KernelType="Gaussian"/>
									</TextBlock.Effect>
								</TextBlock>

								<ContentPresenter x:Name="Presenter"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  Margin="{TemplateBinding Padding}"
												  Content="{TemplateBinding Content}"/>
							</Grid>
						</Border>

						<!--<Rectangle x:Name="FocusVisualElement"
								   Margin="2"
								   StrokeThickness="1"
								   Stroke="#60000000"
								   StrokeDashArray="1 2"
								   Opacity="0"/>-->

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BackgroundColor}"/>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BorderColor}"/>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Pressed">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Pressed.BackgroundColor}"/>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Pressed.BorderColor}"/>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.BorderColor}"/>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.BackgroundColor}"/>

										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.ForegroundColor}"/>
										<ColorAnimation
											Storyboard.TargetName="PresenterBackground"
											Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.BlurColor}"/>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Busy">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BorderColor}" />
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BackgroundColor}" />

										<DoubleAnimation
											Storyboard.TargetName="WaveBox"
											Storyboard.TargetProperty="Opacity"
											Duration="0:0:0.1"
											To="0.8" />
										<RectAnimation
											Storyboard.TargetName="WaveBrush"
											Storyboard.TargetProperty="Viewport"
											Duration="0:0:1"
											RepeatBehavior="Forever"
											From="0,0,25,30" To="25,0,25,30"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>

							<!--<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="FocusVisualElement"
											Storyboard.TargetProperty="Opacity"
											Duration="0"
											To="1"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>-->
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- CircularProgressBar -->
	<Style TargetType="{x:Type controls:CircularProgressBar}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:CircularProgressBar}">
					<Grid>
						<!-- Background ring -->
						<Ellipse Width="{Binding Width, ElementName=PART_CirclePathBox}"
								 Height="{Binding Height, ElementName=PART_CirclePathBox}"
								 Stroke="{TemplateBinding RingSegmentColor}"
								 Opacity="{TemplateBinding RingSegmentOpacity}"
								 StrokeThickness="{TemplateBinding StrokeThickness}"/>

						<!-- Foreground arc -->
						<Path x:Name="PART_CirclePathBox"
							  Stroke="{TemplateBinding ArcSegmentColor}"
							  StrokeThickness="{TemplateBinding StrokeThickness}">
							<Path.Data>
								<PathGeometry>
									<PathGeometry.Figures>
										<PathFigureCollection>
											<PathFigure x:Name="PART_CirclePathFigure">
												<PathFigure.Segments>
													<PathSegmentCollection>
														<ArcSegment x:Name="PART_CircleArcSegment"
																	SweepDirection="Clockwise"/>
													</PathSegmentCollection>
												</PathFigure.Segments>
											</PathFigure>
										</PathFigureCollection>
									</PathGeometry.Figures>
								</PathGeometry>
							</Path.Data>
						</Path>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>